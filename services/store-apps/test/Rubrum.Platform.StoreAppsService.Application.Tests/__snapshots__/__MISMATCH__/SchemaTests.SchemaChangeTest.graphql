schema {
  query: Query
  mutation: Mutation
}

"Defines an aggregate root. It's primary key may not be \"Id\" or it may have a composite primary key."
interface AggregateRoot implements Entity {
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
}

"This interface can be implemented to add standard auditing properties to a class."
interface AuditedObject implements CreationAuditedObject & HasCreationTime & MayHaveCreator & ModificationAuditedObject & HasModificationTime {
  "Creation time."
  creationTime: DateTime
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "The last modified time for this entity."
  lastModificationTime: DateTime
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject implements HasCreationTime & MayHaveCreator {
  "Creation time."
  creationTime: DateTime
  "Id of the creator."
  creatorId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject implements HasDeletionTime & SoftDelete {
  "Id of the deleter user."
  deleterId: ID
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

"Defines an entity. It's primary key may not be \"Id\" or it may have a composite primary key."
interface Entity {
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
}

"Defines an entity with a single primary key with \"Id\" property."
interface EntityOfGuid implements Entity {
  "Unique identifier for this entity."
  id: ID!
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
}

interface Error {
  message: String!
}

"This interface adds IDeletionAuditedObject to IAuditedObject."
interface FullAuditedObject implements AuditedObject & CreationAuditedObject & HasCreationTime & MayHaveCreator & ModificationAuditedObject & HasModificationTime & DeletionAuditedObject & HasDeletionTime & SoftDelete {
  "Creation time."
  creationTime: DateTime
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "The last modified time for this entity."
  lastModificationTime: DateTime
  "Id of the deleter user."
  deleterId: ID
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  "Creation time."
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime implements SoftDelete {
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

interface HasExtraProperties {
  extraProperties: JSON
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  "The last modified time for this entity."
  lastModificationTime: DateTime
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  "Id of the creator."
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject implements HasModificationTime {
  "Last modifier user for this entity."
  lastModifierId: ID
  "The last modified time for this entity."
  lastModificationTime: DateTime
}

interface MultiTenant {
  "Id of the related tenant."
  tenantId: ID
}

interface MustHaveOwner {
  "Id of the owner."
  ownerId: ID!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

type ActivateAppPayload {
  app: App
  errors: [ActivateAppError!]
}

type App implements Node & Entity & EntityOfGuid & AggregateRoot & HasExtraProperties & CreationAuditedObject & HasCreationTime & MayHaveCreator & AuditedObject & ModificationAuditedObject & HasModificationTime & FullAuditedObject & DeletionAuditedObject & HasDeletionTime & SoftDelete & MultiTenant & MustHaveOwner @aggregate {
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
  "Unique identifier for this entity."
  id: ID!
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "Id of the deleter user."
  deleterId: ID
  extraProperties: JSON
  "Id of the related tenant."
  tenantId: ID
  "Id of the owner."
  ownerId: ID!
  name: String!
  version: Version!
  enabled: Boolean!
  "Creation time."
  creationTime: DateTime
  "The last modified time for this entity."
  lastModificationTime: DateTime
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

type AppNameAlreadyExistsError implements Error {
  message: String!
  name: String!
  code: String
  details: String
  logLevel: LogLevel!
}

"A connection to a list of items."
type AppsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AppsEdge!]
  "A flattened list of the nodes."
  nodes: [App!]
}

"An edge in a connection."
type AppsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: App!
}

type AuthorizationError implements Error {
  code: String
  message: String!
}

type BusinessError implements Error {
  code: String
  details: String
  message: String!
}

type ChangeNameAppPayload {
  app: App
  errors: [ChangeNameAppError!]
}

type CreateAppPayload {
  app: App
  errors: [CreateAppError!]
}

type DeactivateAppPayload {
  app: App
  errors: [DeactivateAppError!]
}

type DeleteAppPayload {
  app: App
  errors: [DeleteAppError!]
}

type EntityNotFoundError implements Error {
  id: String
  type: String
  message: String!
}

type Mutation {
  createApp(input: CreateAppInput!): CreateAppPayload! @authorize
  changeNameApp(input: ChangeNameAppInput!): ChangeNameAppPayload! @authorize
  deleteApp(input: DeleteAppInput!): DeleteAppPayload! @authorize
  activateApp(input: ActivateAppInput!): ActivateAppPayload! @authorize
  deactivateApp(input: DeactivateAppInput!): DeactivateAppPayload! @authorize
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  appById(id: ID!): App @authorize
  apps("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AppFilterInput order: [AppSortInput!]): AppsConnection @authorize
}

type ValidationError implements Error {
  message: String!
  results: [ValidationResult!]!
}

type ValidationResult {
  errorMessage: String
}

type Version {
  major: Int!
  minor: Int!
  patch: Int!
}

union ActivateAppError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError

union ChangeNameAppError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError | AppNameAlreadyExistsError

union CreateAppError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError | AppNameAlreadyExistsError

union DeactivateAppError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError

union DeleteAppError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError

input ActivateAppInput {
  id: ID!
}

input AppFilterInput {
  and: [AppFilterInput!]
  or: [AppFilterInput!]
  tenantId: UuidOperationFilterInput
  ownerId: UuidOperationFilterInput
  name: StringOperationFilterInput
  version: VersionFilterInput
  enabled: BooleanOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  deleterId: UuidOperationFilterInput
  deletionTime: DateTimeOperationFilterInput
  lastModificationTime: DateTimeOperationFilterInput
  lastModifierId: UuidOperationFilterInput
  creationTime: DateTimeOperationFilterInput
  creatorId: UuidOperationFilterInput
  extraProperties: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  concurrencyStamp: StringOperationFilterInput
  id: UuidOperationFilterInput
}

input AppSortInput {
  tenantId: SortEnumType
  ownerId: SortEnumType
  name: SortEnumType
  version: VersionSortInput
  enabled: SortEnumType
  isDeleted: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  concurrencyStamp: SortEnumType
  id: SortEnumType
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ChangeAppNameInput {
  id: ID!
  name: String!
}

input ChangeNameAppInput {
  input: ChangeAppNameInput!
}

input CreateAppInput {
  name: String!
  version: VersionInput!
  enabled: Boolean!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DeactivateAppInput {
  id: ID!
}

input DeleteAppInput {
  id: ID!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input KeyValuePairOfStringAndObjectFilterInput {
  and: [KeyValuePairOfStringAndObjectFilterInput!]
  or: [KeyValuePairOfStringAndObjectFilterInput!]
  key: StringOperationFilterInput
}

input ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput {
  all: KeyValuePairOfStringAndObjectFilterInput
  none: KeyValuePairOfStringAndObjectFilterInput
  some: KeyValuePairOfStringAndObjectFilterInput
  any: Boolean
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input VersionFilterInput {
  and: [VersionFilterInput!]
  or: [VersionFilterInput!]
  major: IntOperationFilterInput
  minor: IntOperationFilterInput
  patch: IntOperationFilterInput
}

input VersionInput {
  major: Int!
  minor: Int!
  patch: Int!
}

input VersionSortInput {
  major: SortEnumType
  minor: SortEnumType
  patch: SortEnumType
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum LogLevel {
  TRACE
  DEBUG
  INFORMATION
  WARNING
  ERROR
  CRITICAL
  NONE
}

enum SortEnumType {
  ASC
  DESC
}

directive @aggregate on OBJECT

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar Any

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
