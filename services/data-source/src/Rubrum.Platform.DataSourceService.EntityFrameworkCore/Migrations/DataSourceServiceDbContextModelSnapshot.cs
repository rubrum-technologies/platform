// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rubrum.Platform.DataSourceService.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Rubrum.Platform.DataSourceService.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(DataSourceServiceDbContext))]
    partial class DataSourceServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Rubrum.PlatformDataSources", (string)null);

                    b.HasDiscriminator().HasValue("DataSource");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.DataSourceInternalRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DataSourceId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Left", "Rubrum.Platform.DataSourceService.DataSourceInternalRelation.Left#DataSourceInternalLink", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("EntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uuid");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Right", "Rubrum.Platform.DataSourceService.DataSourceInternalRelation.Right#DataSourceInternalLink", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("EntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uuid");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.ToTable("Rubrum.PlatformDataSourceInternalRelations", (string)null);
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsNotNull")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rubrum.PlatformDatabaseColumns", (string)null);
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DatabaseSourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseSourceId");

                    b.ToTable("Rubrum.PlatformDatabaseTables", (string)null);
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseSource", b =>
                {
                    b.HasBaseType("Rubrum.Platform.DataSourceService.DataSource");

                    b.HasDiscriminator().HasValue("DatabaseSource");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Graphql.GraphqlSource", b =>
                {
                    b.HasBaseType("Rubrum.Platform.DataSourceService.DataSource");

                    b.HasDiscriminator().HasValue("GraphqlSource");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Grpc.GrpcSource", b =>
                {
                    b.HasBaseType("Rubrum.Platform.DataSourceService.DataSource");

                    b.HasDiscriminator().HasValue("GrpcSource");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.OData.ODataSource", b =>
                {
                    b.HasBaseType("Rubrum.Platform.DataSourceService.DataSource");

                    b.HasDiscriminator().HasValue("ODataSource");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.OpenApi.OpenApiSource", b =>
                {
                    b.HasBaseType("Rubrum.Platform.DataSourceService.DataSource");

                    b.HasDiscriminator().HasValue("OpenApiSource");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.DataSourceInternalRelation", b =>
                {
                    b.HasOne("Rubrum.Platform.DataSourceService.DataSource", null)
                        .WithMany("InternalRelations")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseColumn", b =>
                {
                    b.HasOne("Rubrum.Platform.DataSourceService.Database.DatabaseTable", null)
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseTable", b =>
                {
                    b.HasOne("Rubrum.Platform.DataSourceService.Database.DatabaseSource", null)
                        .WithMany("Tables")
                        .HasForeignKey("DatabaseSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.DataSource", b =>
                {
                    b.Navigation("InternalRelations");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseTable", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Rubrum.Platform.DataSourceService.Database.DatabaseSource", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
