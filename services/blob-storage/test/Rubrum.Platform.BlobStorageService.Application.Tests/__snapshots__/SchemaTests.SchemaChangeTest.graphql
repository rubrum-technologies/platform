schema {
  query: Query
  mutation: Mutation
}

"Defines an aggregate root. It's primary key may not be \"Id\" or it may have a composite primary key."
interface AggregateRoot implements Entity {
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
}

"This interface can be implemented to add standard auditing properties to a class."
interface AuditedObject implements CreationAuditedObject & HasCreationTime & MayHaveCreator & ModificationAuditedObject & HasModificationTime {
  "Creation time."
  creationTime: DateTime
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "The last modified time for this entity."
  lastModificationTime: DateTime
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject implements HasCreationTime & MayHaveCreator {
  "Creation time."
  creationTime: DateTime
  "Id of the creator."
  creatorId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject implements HasDeletionTime & SoftDelete {
  "Id of the deleter user."
  deleterId: ID
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

"Defines an entity. It's primary key may not be \"Id\" or it may have a composite primary key."
interface Entity {
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
}

"Defines an entity with a single primary key with \"Id\" property."
interface EntityOfGuid implements Entity {
  "Unique identifier for this entity."
  id: ID!
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
}

interface Error {
  message: String!
}

"This interface adds IDeletionAuditedObject to IAuditedObject."
interface FullAuditedObject implements AuditedObject & CreationAuditedObject & HasCreationTime & MayHaveCreator & ModificationAuditedObject & HasModificationTime & DeletionAuditedObject & HasDeletionTime & SoftDelete {
  "Creation time."
  creationTime: DateTime
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "The last modified time for this entity."
  lastModificationTime: DateTime
  "Id of the deleter user."
  deleterId: ID
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  "Creation time."
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime implements SoftDelete {
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

interface HasExtraProperties {
  extraProperties: JSON
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  "The last modified time for this entity."
  lastModificationTime: DateTime
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  "Id of the creator."
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject implements HasModificationTime {
  "Last modifier user for this entity."
  lastModifierId: ID
  "The last modified time for this entity."
  lastModificationTime: DateTime
}

interface MultiTenant {
  "Id of the related tenant."
  tenantId: ID
}

interface MustHaveOwner {
  "Id of the owner."
  ownerId: ID!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

type AuthorizationError implements Error {
  code: String
  message: String!
}

type Blob implements Node & Entity & EntityOfGuid & AggregateRoot & HasExtraProperties & CreationAuditedObject & HasCreationTime & MayHaveCreator & AuditedObject & ModificationAuditedObject & HasModificationTime & FullAuditedObject & DeletionAuditedObject & HasDeletionTime & SoftDelete & MultiTenant & MustHaveOwner @aggregate @relation(name: "", value: "") @permission(name: "", value: "") @permission(name: "", value: "") {
  url: String!
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
  "Unique identifier for this entity."
  id: ID!
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "Id of the deleter user."
  deleterId: ID
  extraProperties: JSON
  "Id of the related tenant."
  tenantId: ID
  "Id of the owner."
  ownerId: ID!
  folderId: ID
  metadata: BlobMetadata!
  "Creation time."
  creationTime: DateTime
  "The last modified time for this entity."
  lastModificationTime: DateTime
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

type BlobMetadata {
  size: Long!
  mimeType: String!
  filename: String!
  extension: String!
}

type BusinessError implements Error {
  code: String
  details: String
  message: String!
}

type ChangeFolderBlobNamePayload {
  folderBlob: FolderBlob
  errors: [ChangeFolderBlobNameError!]
}

type ChangeFolderBlobParentIdPayload {
  folderBlob: FolderBlob
  errors: [ChangeFolderBlobParentIdError!]
}

type CreateFolderBlobPayload {
  folderBlob: FolderBlob
  errors: [CreateFolderBlobError!]
}

type EntityNotFoundError implements Error {
  id: String
  type: String
  message: String!
}

type FolderBlob implements Node & Entity & EntityOfGuid & AggregateRoot & HasExtraProperties & CreationAuditedObject & HasCreationTime & MayHaveCreator & AuditedObject & ModificationAuditedObject & HasModificationTime & FullAuditedObject & DeletionAuditedObject & HasDeletionTime & SoftDelete & MultiTenant & MustHaveOwner @aggregate @relation(name: "", value: "") @permission(name: "", value: "") @permission(name: "", value: "") {
  parent: FolderBlob
  blobs: [Blob!]!
  "Returns an array of ordered keys for this entity."
  keys: [Any]!
  "Unique identifier for this entity."
  id: ID!
  "Id of the creator."
  creatorId: ID
  "Last modifier user for this entity."
  lastModifierId: ID
  "Id of the deleter user."
  deleterId: ID
  extraProperties: JSON
  "Id of the related tenant."
  tenantId: ID
  "Id of the owner."
  ownerId: ID!
  parentId: ID
  name: String!
  "Creation time."
  creationTime: DateTime
  "The last modified time for this entity."
  lastModificationTime: DateTime
  "Deletion time."
  deletionTime: DateTime
  "Used to mark an Entity as 'Deleted'."
  isDeleted: Boolean!
}

type FolderBlobNameAlreadyExistsError implements Error {
  message: String!
  ownerId: UUID!
  parentId: UUID
  name: String!
  code: String
  details: String
  logLevel: LogLevel!
}

type FolderBlobParentHasDifferentOwnerError implements Error {
  message: String!
  ownerId: UUID!
  parentId: UUID!
  code: String
  details: String
  logLevel: LogLevel!
}

type Mutation {
  createFolderBlob(input: CreateFolderBlobInput!): CreateFolderBlobPayload! @authorize
  changeFolderBlobParentId(input: ChangeFolderBlobParentIdInput!): ChangeFolderBlobParentIdPayload! @authorize
  changeFolderBlobName(input: ChangeFolderBlobNameInput!): ChangeFolderBlobNamePayload! @authorize
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  blobById(id: ID!): Blob @authorize
  folderBlobById(id: ID!): FolderBlob @authorize
  folders(parentId: ID where: FolderBlobFilterInput order: [FolderBlobSortInput!]): [FolderBlob!]! @authorize
}

type ValidationError implements Error {
  message: String!
  results: [ValidationResult!]!
}

type ValidationResult {
  errorMessage: String
}

union ChangeFolderBlobNameError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError | FolderBlobNameAlreadyExistsError

union ChangeFolderBlobParentIdError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError | FolderBlobNameAlreadyExistsError | FolderBlobParentHasDifferentOwnerError

union CreateFolderBlobError = ValidationError | BusinessError | EntityNotFoundError | AuthorizationError | FolderBlobNameAlreadyExistsError | FolderBlobParentHasDifferentOwnerError

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ChangeFolderBlobNameInput {
  id: ID!
  name: String!
}

input ChangeFolderBlobParentIdInput {
  id: ID!
  parentId: ID
}

input CreateFolderBlobInput {
  parentId: ID
  name: String!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input FolderBlobFilterInput {
  and: [FolderBlobFilterInput!]
  or: [FolderBlobFilterInput!]
  tenantId: UuidOperationFilterInput
  ownerId: UuidOperationFilterInput
  parentId: UuidOperationFilterInput
  name: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  deleterId: UuidOperationFilterInput
  deletionTime: DateTimeOperationFilterInput
  lastModificationTime: DateTimeOperationFilterInput
  lastModifierId: UuidOperationFilterInput
  creationTime: DateTimeOperationFilterInput
  creatorId: UuidOperationFilterInput
  extraProperties: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  concurrencyStamp: StringOperationFilterInput
  id: UuidOperationFilterInput
}

input FolderBlobSortInput {
  tenantId: SortEnumType
  ownerId: SortEnumType
  parentId: SortEnumType
  name: SortEnumType
  isDeleted: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  concurrencyStamp: SortEnumType
  id: SortEnumType
}

input KeyValuePairOfStringAndObjectFilterInput {
  and: [KeyValuePairOfStringAndObjectFilterInput!]
  or: [KeyValuePairOfStringAndObjectFilterInput!]
  key: StringOperationFilterInput
}

input ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput {
  all: KeyValuePairOfStringAndObjectFilterInput
  none: KeyValuePairOfStringAndObjectFilterInput
  some: KeyValuePairOfStringAndObjectFilterInput
  any: Boolean
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum LogLevel {
  TRACE
  DEBUG
  INFORMATION
  WARNING
  ERROR
  CRITICAL
  NONE
}

enum SortEnumType {
  ASC
  DESC
}

directive @aggregate on OBJECT

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

directive @permission(name: String! value: String!) repeatable on OBJECT

directive @relation(name: String! value: String!) repeatable on OBJECT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar Any

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
