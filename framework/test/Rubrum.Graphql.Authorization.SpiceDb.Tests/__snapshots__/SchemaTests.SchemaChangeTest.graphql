schema {
  query: Query
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject implements HasCreationTime & MayHaveCreator {
  creationTime: DateTime
  creatorId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject implements HasDeletionTime & SoftDelete {
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean!
}

"This interface adds IDeletionAuditedObject to IAuditedObject."
interface FullAuditedObject implements CreationAuditedObject & HasCreationTime & MayHaveCreator & ModificationAuditedObject & HasModificationTime & DeletionAuditedObject & HasDeletionTime & SoftDelete {
  creationTime: DateTime
  creatorId: ID
  lastModifierId: ID
  lastModificationTime: DateTime
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime implements SoftDelete {
  deletionTime: DateTime
  isDeleted: Boolean!
}

interface HasExtraProperties {
  extraProperties: JSON
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  lastModificationTime: DateTime
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject implements HasModificationTime {
  lastModifierId: ID
  lastModificationTime: DateTime
}

interface MultiTenant {
  tenantId: ID
}

"Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  isDeleted: Boolean!
}

type Document @relation(name: "reader", value: "user") @relation(name: "writer", value: "user") @permission(name: "view", value: "reader + edit") @permission(name: "edit", value: "writer") {
  name: String!
  id: UUID!
}

type Issue @relation(name: "project", value: "project") @relation(name: "assigned", value: "user") @permission(name: "assign", value: "project->issue_assigner") @permission(name: "resolve", value: "project->assigned_issue_resolver & assign + project->any_issue_resolver") @permission(name: "create_comment", value: "project->comment_creator") @permission(name: "project_comment_deleter", value: "project->comment_deleter") {
  id: UUID!
}

type Organization @relation(name: "platform", value: "platform") @permission(name: "admin", value: "platform->super_admin") {
  name: String!
  id: UUID!
}

type Platform @relation(name: "administrator", value: "user") @permission(name: "super_admin", value: "administrator") {
  name: String!
  id: UUID!
}

type Project @relation(name: "issue_creator", value: "") @relation(name: "issue_assigner", value: "") @relation(name: "any_issue_resolver", value: "") @relation(name: "assigned_issue_resolver", value: "") @relation(name: "comment_creator", value: "") @relation(name: "comment_deleter", value: "") @relation(name: "role_manager", value: "") @permission(name: "create_issue", value: "issue_creator") @permission(name: "create_role", value: "role_manager") {
  id: UUID!
}

type Query {
  document: Document!
}

type Resource @relation(name: "owner", value: "user | organization") @permission(name: "admin", value: "owner + organization->admin") {
  name: String!
  id: UUID!
}

type Role @relation(name: "project", value: "project") @relation(name: "member", value: "user") @relation(name: "built_in_role", value: "project") @permission(name: "delete", value: "project->role_manager - project->role_manager") @permission(name: "add_permission", value: "project->role_manager - project->role_manager") @permission(name: "add_user", value: "project->role_manager") @permission(name: "remove_permission", value: "project->role_manager - project->role_manager") {
  id: UUID!
}

type User {
  name: String!
  id: UUID!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

directive @permission(name: String! value: String!) repeatable on OBJECT

directive @relation(name: String! value: String!) repeatable on OBJECT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
