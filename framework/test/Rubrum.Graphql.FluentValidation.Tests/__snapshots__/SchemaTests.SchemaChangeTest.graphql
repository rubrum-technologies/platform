schema {
  query: Query
  mutation: Mutation
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject implements HasCreationTime & MayHaveCreator {
  creationTime: DateTime
  creatorId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject implements HasDeletionTime & SoftDelete {
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean!
}

interface Error {
  message: String!
}

"This interface adds IDeletionAuditedObject to IAuditedObject."
interface FullAuditedObject implements CreationAuditedObject & HasCreationTime & MayHaveCreator & ModificationAuditedObject & HasModificationTime & DeletionAuditedObject & HasDeletionTime & SoftDelete {
  creationTime: DateTime
  creatorId: ID
  lastModifierId: ID
  lastModificationTime: DateTime
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime implements SoftDelete {
  deletionTime: DateTime
  isDeleted: Boolean!
}

interface HasExtraProperties {
  extraProperties: JSON
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  lastModificationTime: DateTime
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject implements HasModificationTime {
  lastModifierId: ID
  lastModificationTime: DateTime
}

interface MultiTenant {
  tenantId: ID
}

"Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  isDeleted: Boolean!
}

type BusinessError implements Error {
  code: String
  details: String
  message: String!
}

type Country {
  id: ID!
  name: String!
}

type CreateCountryPayload {
  country: Country
  errors: [CreateCountryError!]
}

type EntityNotFoundError implements Error {
  id: String
  type: String
  message: String!
}

type Mutation {
  createCountry(input: CreateCountryInput!): CreateCountryPayload!
}

type Query {
  country: Country!
}

type ValidationError implements Error {
  message: String!
  results: [ValidationResult!]!
}

type ValidationResult {
  errorMessage: String
}

union CreateCountryError = ValidationError | BusinessError | EntityNotFoundError

input CreateCountryInput {
  """
  Maximum length '20',
  Minimum length '1',
  Required and not empty
  """
  name: String!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON
